package com.dialoguespace.service;

import java.io.File;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import org.apache.commons.io.FileUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.dialoguespace.dao.CommonDAO;
import com.dialoguespace.vo.FileVO;

@Service
public class CommonService {
	
	@Autowired
	CommonDAO commonDAO;

	// 검색 조건 Map에 담기
	public Map makeSrchInfo(String searchType, String searchKeyword) throws Exception {
		Map srchInfo = new HashMap();
		srchInfo.put("searchType", searchType);
		srchInfo.put("searchKeyword", searchKeyword);
		
		return srchInfo;
	}
	
	// 다중 MultipartFile에서 VO 설정 및 업로드 파일 처리 후 List 리턴
	public List<FileVO> getFileList(MultipartFile[] files, String fileParent, String category, String path) throws IOException {
		List<FileVO> fileList = new ArrayList<>();
		for(int i = 0; i < files.length; i++) {
			MultipartFile file = files[i];
			FileVO fVO = this.setFileVOByMultipart(file, fileParent, category, path);
			if (fVO != null) {
				fileList.add(fVO);
			}
		}
		
		return fileList;
	}
	
	// 개별 fileVO 설정
	public FileVO setFileVOByMultipart(MultipartFile file, String fileParent, String category, String path) throws IOException {
		if(!file.isEmpty()) {
			String sysName = UUID.randomUUID().toString();
			FileVO vo = new FileVO();
			
			vo.setFileParent(fileParent);
			vo.setCategory(category);
			vo.setOrgName(file.getOriginalFilename());
			vo.setSysName(sysName);
			vo.setFileSize(file.getSize());
			vo.setFancySize(fansySize(file.getSize()));
			vo.setContentType(file.getContentType());
			vo.setFilePath(path);
			
			return vo;
		} else {
			return null;
		}
	}
	
	private DecimalFormat df = new DecimalFormat("#,###.0");
	
	private String fansySize(long size) {
		if(size < 1024) {	// 1K 미만
			return size + " Bytes";
		} else if(size < (1024 * 1024)) {	// 1M 미만
			return df.format(size / 1024.0) + " KB";
		} else if(size < (1024 * 1024 * 1024)) {	// 1G 미만
			return df.format(size / (1024.0 * 1024.0)) + " MB";
		} else {
			return df.format(size / (1024.0 * 1024.0 * 1024.0)) + " GB";
		}
	}

	// 파일 저장
	public int saveFiles(MultipartFile[] multipartFiles, List<FileVO> fileList) {
		
		try {
			// 파일 하나씩 저장
			for(int i = 0; i < multipartFiles.length; i++) {
				// 물리 파일 저장
				FileUtils.copyInputStreamToFile(multipartFiles[i].getInputStream(), new File(fileList.get(i).getFilePath(), fileList.get(i).getSysName()));
				System.out.println(i + "번 째 물리 파일 저장"); 
				
				// 파일 내용 DB에 저장
				commonDAO.saveFile(fileList.get(i));
				System.out.println(i + "번 째 파일 내용 DB 저장");
			}
			
			// 물리파일, DB 저장 끝난 후 템프 폴더에 있는 파일을 resource로 옮기기
			
			
		} catch(Exception e) {
			// 템프 폴더 지우기
			
			
		}
		// 임시 temp 폴더에 저장 후 다 끝나고 나서 옮기기 // 만일 저장 하는 도중 에러나면 temp 폴더 지우기
			
		return 0;
		
	}
	
	// 임시 폴더 생성
	public void createTempFolder() {
		String path = "D:\\demoTemp";
		File folder = new File(path);
		try {
			if(folder.exists()) {
				File[] folder_list = folder.listFiles();
				for(File file : folder_list) {
					file.delete();
					System.out.println(file + " 삭제 완료");
				}
				folder.delete();
			} else {
				folder.mkdir();
				System.out.println("demo 임시 폴더 생성");
				
			}
		} catch(Exception e) {
			e.getStackTrace();
		}
	}
	
}
