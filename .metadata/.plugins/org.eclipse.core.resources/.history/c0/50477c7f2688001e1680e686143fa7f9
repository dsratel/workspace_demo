package com.dialoguespace.comment;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.dialoguespace.utils.EncryptionUtils;

@Service
public class CommentService {
	
	@Autowired
	CommentDAO commentDAO;
	
	private EncryptionUtils encryption = new EncryptionUtils();
	
	// 댓글 작성
	public int wrtieComment(CommentDTO commentDto) {
		// commentDTO 세팅
		// 비밀번호 암호화
		commentDto.setPw(encryption.getSHA512(commentDto.getPw()));
				
		// 답글 인 경우
		if(commentDto.getPid() != 0) {
			// 동일 rootseq, depth의 마지막 시퀀스 가져오기
			Map map = new HashMap();
			map.put("boardseq", commentDto.getBoardseq());
			map.put("depth", commentDto.getDepth());
			map.put("re_order", commentDto.getRe_order());
			int nextReorder = commentDAO.getNextReorder(map);
			
			if(nextReorder != commentDto.getRe_order()) {
				// 부모 댓글 다음 댓글이 있다면 그 댓글의 re_order로 지정하고 해당 re_order 이후 댓글의 re_order+1
				commentDto.setDepth(commentDto.getDepth()+1);
				commentDto.setRe_order(nextReorder);
				
				// 해당 re_order 이후 댓글의 re_order+1
				map.put("re_order", nextReorder);
				map.put("boardseq", commentDto.getBoardseq());
				
				commentDAO.sortComment(map);
			} else {
				// 부모 댓글 다음 댓글이 없다면 상위 댓글의 형제 검색
				int depth = commentDto.getDepth();
				while(depth !=0) {
					nextReorder = commentDAO.getNextReorder(map);
				}
			}
			
		}
		
		
		// 댓글 저장
		int rs = commentDAO.writeComment(commentDto);
		if(commentDto.getDepth() == 0) {
			commentDAO.editRootSeq();	// depth 0 일 때 rootseq 수정
		}
		return rs;
	}
	
	// 댓글 목록
	public List<CommentDTO> cmtListByBoardseq(int boardseq) {
		return commentDAO.cmtListByBoardseq(boardseq);
	}
	
	// 하위 댓글 확인
	public int hasReply(Iterator it) {
		return 0;
	}
	
	// 댓글 삭제
	public int deleteCmt(int seq) {
		return commentDAO.deleteCmt(seq);
	}
	
	// 댓글 비밀번호 확인
	public int passwordCheck(int seq, String pw) {
		Map map = new HashMap();
		
		// 비밀번호 암호화
		pw = encryption.getSHA512(pw);
		
		map.put("seq", seq);
		map.put("pw", pw);
		
		return commentDAO.passwordCheck(map);
	}
	
	// 댓글 수정
	public int editCmt(int seq, String content) {
		Map map = new HashMap();
		map.put("seq", seq);
		map.put("content", content);
		
		return commentDAO.editCmt(map);
	}

}
