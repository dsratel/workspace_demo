package com.dialoguespace.service;

import java.io.IOException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.dialoguespace.vo.FileVO;

@Service
public class CommonService {

	// 검색 조건 Map에 담기
	public Map makeSrchInfo(String searchType, String searchKeyword) throws Exception {
		Map srchInfo = new HashMap();
		srchInfo.put("searchType", searchType);
		srchInfo.put("searchKeyword", searchKeyword);
		
		return srchInfo;
	}
	
	// 다중 MultipartFile에서 VO 설정 및 업로드 파일 처리 후 List 리턴
	public List<FileVO> getFileList(MultipartFile[] files, String category, String path) throws IOException {
		List<FileVO> fileList = new ArrayList<>();
		for(int i = 0; i < files.length; i++) {
			MultipartFile file = files[i];
			FileVO fVO = this.setFileVOByMultipart(file, category, path);
			if (fVO != null) {
				fileList.add(fVO);
			}
		}
		
		return fileList;
	}
	
	// 개별 fileVO 설정
	public FileVO setFileVOByMultipart(MultipartFile file, String category, String path) throws IOException {
		if(!file.isEmpty()) {
			String sysName = UUID.randomUUID().toString();
			FileVO vo = new FileVO();
			vo.setOrgName(file.getOriginalFilename());
			vo.setSysName(sysName);
			vo.setFileSize(file.getSize());
			vo.setFancySize(fansySize(file.getSize()));
			vo.setContentType(file.getContentType());
			
		}
	}
	
	private DecimalFormat df = new DecimalFormat("#,###.0");
	
	private String fansySize(long size) {
		if(size < 1024) {	// 1K 미만
			return size + " Bytes";
		} else if(size < (1024 * 1024)) {	// 1M 미만
			return df.format(size / 1024.0) + " KB";
		} else if(size < (1024 * 1024 * 1024)) {	// 1G 미만
			return df.format(size / (1024.0 * 1024.0)) + " MB";
		} else {
			return df.format(size / (1024.0 * 1024.0 * 1024.0)) + " GB";
		}
	}

	// 
	
}
